#!/usr/bin/env bash
#

#set -x
DIR=$(dirname $0)
source ${DIR}/scripts/helpers.sh

if [ -f "./env-vars" ]; then
. ./env-vars
fi

readonly CHANNEL="${CF_HELM_CHANNEL:-dev}"
readonly CODEFRESH_REPOSITORY=http://charts.codefresh.io/${CHANNEL}

readonly RELEASE=cf

readonly WORKING_DIR="$(dirname "$0")"
readonly SERVICE_ACCOUNT="${WORKING_DIR}/sa.json"
readonly VALUES_FILE="${WORKING_DIR}/values.yaml"
readonly DOCKER_CFG_YAML="${WORKING_DIR}/dockercfg.yaml"
#readonly SECRET_VALUES_FILE="${WORKING_DIR}/values-dec.yaml"
readonly WEBTLS_VALUES_FILE="${WORKING_DIR}/webtls.yaml"

usage() {
	echo "$0 [-h] [-y|--yes|--web-tls-key|--web-tls-cert]"
	exit 0
}

generateWebTlsValuesFile() {

WEBTLSKEY=$(cat ${WebTlsKey} | sed 's/^/    /')
WEBTLSCERT=$(cat ${WebTlsCert} | sed 's/^/    /')

WEBTLSKEY_CFUI=$(cat ${WebTlsKey} | sed 's/^/      /')
WEBTLSCERT_CFUI=$(cat ${WebTlsCert} | sed 's/^/      /')

cat <<-EOF >${WEBTLS_VALUES_FILE}
---
ingress:
  webTlsSecretName: "star.codefresh.io"
nomios:
  ingress:
    webTlsSecretName: "star.codefresh.io"
webTLS:
  secretName: star.codefresh.io
  key: |
${WEBTLSKEY}
  cert: |
${WEBTLSCERT}

cfui:
  webTLS:
    key: |
${WEBTLSKEY_CFUI}
    cert: |
${WEBTLSCERT_CFUI}
EOF
#  echo "Success!"
#  exit 0
}

[ "$1" == "-h" ] && usage

# run_as_root

while [[ $1 =~ ^(-(y)|--(yes|web-tls-key|web-tls-cert|set|debug)) ]]
do
  key=$1
  value=$2
  case $key in
    -y|--yes)
        YES="true"
      ;;
    --web-tls-key)
        WebTlsKey="$value"
        shift
      ;;
    --web-tls-cert)
        WebTlsCert="$value"
        shift
      ;;
    --set)
        SET_VALUES="$SET_VALUES --set $value"
        shift
      ;;
    --debug)
        SET_DEBUG="--debug"
      ;;
  esac
  shift # past argument or value
done

os=

case "$(uname -s)" in
  Linux)
    os=linux
  ;;
  Darwin)
    os=darwin
  ;;
  *)
  ;;
esac

msg "Starting on-prem Codefresh deployment"

if [[ ! "$YES" == 'true' ]]; then
  approveContext
else
  msg "Your kubectl is configured with the following context: "
	kubectl config current-context
fi

#if [ -n "${WebTlsKey}" ] && [ -z "${WebTlsCert}" ]; then
#if [ -z "${WebTlsKey}" ] && [ -n "${WebTlsCert}" ]; then
[ -n "${WebTlsKey}" ] && [ -z "${WebTlsCert}" ] && err "Please specify --web-tls-cert argument"
[ -n "${WebTlsKey}" ] && [ ! -f "${WebTlsKey}" ] && err "${WebTlsKey} file path not found. Please define correct path to the private key file."
[ -z "${WebTlsKey}" ] && [ -n "${WebTlsCert}" ] && err "Please specify --web-tls-key argument"
[ -n "${WebTlsCert}" ] && [ ! -f "${WebTlsCert}" ] && err "${WebTlsCert} file path not found. Please define correct path to the certificate full chain file."
[ -n "${WebTlsKey}" ] && [ -f "${WebTlsKey}" ] && [ -n "${WebTlsCert}" ] && [ -f "${WebTlsCert}" ] && generateWebTlsValuesFile

msg "Checking helm binary on your system"
checkHelmInstalled "helm"

msg "Checking if tiller is installed on kubernetes cluster"
checkTillerInstalled

msg "Checking tiller status..."
checkTillerStatus

msg "Adding Helm repo..."
#addHelmCodefreshRepo
helm repo add codefresh-onprem-${CHANNEL} "${CODEFRESH_REPOSITORY}"

DOCKER_CFG_JSON=$(cat ${SERVICE_ACCOUNT})

if [ $os == "linux" ]; then
  BASE64="base64 -w0"
else
  BASE64="base64"
fi

DOCKER_CFG_VAR=$(echo -n "_json_key:${DOCKER_CFG_JSON}" | $BASE64)

cat <<EOF >${DOCKER_CFG_YAML}
---
dockerconfigjson:
  auths:
    gcr.io:
      auth: ${DOCKER_CFG_VAR}

cfui:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

runtime-environment-manager:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

onboarding-status:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

cfanalytic:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}
EOF

#MTU_VALUE="--set global.mtu=$(cat /sys/class/net/cni0/mtu)"
#TIMESTAMP=$(date +%F_%H-%M-%S)
# --values "${SECRET_VALUES_FILE}" \
#  --version 0.6.62 \
#  --force \

[ -n "${WebTlsKey}" ] && [ -f "${WebTlsKey}" ] && [ -n "${WebTlsCert}" ] && [ -f "${WebTlsCert}" ] && [ -f "${WEBTLS_VALUES_FILE}" ] && WEBTLS_VALUES="--values ${WEBTLS_VALUES_FILE}"

cf_status=$(helm status $RELEASE 2>/dev/null | awk -F': ' '$1 == "STATUS" {print $2}')

[ -z "${cf_status}" ] && SEEDJOBS="--set global.seedJobs=true" && CERTJOBS="--set global.certsJobs=true"

msg "Installing/Updating Codefresh..."
helm upgrade ${RELEASE} codefresh-onprem-${CHANNEL}/codefresh \
  --install \
  --namespace codefresh \
  --values "${VALUES_FILE}" \
  --values "${DOCKER_CFG_YAML}" \
  ${WEBTLS_VALUES} \
  --no-hooks \
  --set cfapi.redeploy=true \
  ${SEEDJOBS} \
  ${CERTJOBS} \
  ${SET_VALUES} \
  ${SET_DEBUG}
#  ${MTU_VALUE}
