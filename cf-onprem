#!/usr/bin/env bash
#

#set -x
DIR=$(dirname $0)
source ${DIR}/scripts/helpers.sh

if [ -f "./env-vars" ]; then
. ./env-vars
fi

CHANNEL="${CF_HELM_CHANNEL:-dev}"

readonly RELEASE=cf

readonly WORKING_DIR="$(dirname "$0")"
readonly SERVICE_ACCOUNT="${WORKING_DIR}/sa.json"
readonly VALUES_FILE="${WORKING_DIR}/values.yaml"
readonly DOCKER_CFG_YAML="${WORKING_DIR}/dockercfg.yaml"
readonly WEBTLS_VALUES_FILE="${WORKING_DIR}/webtls.yaml"

usage() {
  echo "Usage:
  $0 [ options ]

  options:
  --web-tls-cert   - path to web-tls certificate
  --web-tls-key    - path to web-tls key
  --set            - sets helm release values from command line, example --set global.mtu=1400
  --repo-channel   - helm repo channel of http://charts.codefresh.io/ 
  --version        - helm repo version
  --debug          - run helm in debug mode
  --skip-validator - skip validator running
  --dry-run        - dry-run mode - echo command instead of actual running
  "
}


generateWebTlsValuesFile() {
  
  eval "$(parse_yaml "${VALUES_FILE}" | grep tls_)"
  if [[ "${tls_selfSigned}" == "true" ]]; then
     echo "Using self Signed certificates"
     #rm -fv ${WEBTLS_VALUES_FILE}
     unset SET_WEBTLS_VALUES
     return 0
  fi

  if [[ -z "${tls_cert}" || ! -f "${tls_cert}" ]]; then
     echo "Error: .Values.tls.cert $tls_cert file does not exists "
     return 1
  fi

  if [[ -z "${tls_key}" || ! -f "${tls_key}" ]]; then
     echo "Error: .Values.tls.key $tls_key file does not exists "
     return 1
  fi
  echo "generateWebTlsValuesFile: tls_cert=$tls_cert tls_key=$tls_key"

  WEBTLSKEY=$(cat ${tls_key} | sed 's/^/    /')
  WEBTLSCERT=$(cat ${tls_cert} | sed 's/^/    /')

  WEBTLSKEY_CFUI=$(cat ${tls_key} | sed 's/^/      /')
  WEBTLSCERT_CFUI=$(cat ${tls_cert} | sed 's/^/      /')

  cat <<-EOF >${WEBTLS_VALUES_FILE}
---
ingress:
  webTlsSecretName: "star.codefresh.io"
nomios:
  ingress:
    webTlsSecretName: "star.codefresh.io"
webTLS:
  secretName: star.codefresh.io
  key: |
${WEBTLSKEY}
  cert: |
${WEBTLSCERT}

cfui:
  webTLS:
    key: |
${WEBTLSKEY_CFUI}
    cert: |
${WEBTLSCERT_CFUI}
EOF

  SET_WEBTLS_VALUES="--values ${WEBTLS_VALUES_FILE} "

}

while [[ $1 =~ ^(-(y|h)|--(help|yes|set|debug|version|repo-channel|skip-validator|dry-run)) ]]
do
  key=$1
  value=$2
  case $key in
    -h|--help)
        usage
        exit 0
      ;;
    -y|--yes)
        YES="true"
      ;;
    --set)
        SET_VALUES="$SET_VALUES --set $value"
        shift
      ;;
    --repo-channel)
        CHANNEL="$value"
        shift
      ;;
    --version)
        SET_VERSION="$SET_VERSION --version $value"
        shift
      ;;
    --debug)
        SET_DEBUG="--debug"
      ;;
    --skip-validator)
        SKIP_VALIDATOR="true"
      ;;
    --dry-run)
        DRY_RUN="true"
      ;;
  esac
  shift # past argument or value
done

os=

case "$(uname -s)" in
  Linux)
    os=linux
  ;;
  Darwin)
    os=darwin
  ;;
  *)
  ;;
esac

msg "Starting on-prem Codefresh deployment"

if [[ ! "$YES" == 'true' ]]; then
  approveContext
else
  msg "Your kubectl is configured with the following context: "
	kubectl config current-context
fi

generateWebTlsValuesFile || err "Web Tls certificates error"

msg "Checking helm binary on your system"
checkHelmInstalled "helm"

msg "Checking if tiller is installed on kubernetes cluster"
checkTillerInstalled

msg "Checking tiller status..."
checkTillerStatus

msg "Adding Helm repo..."
#addHelmCodefreshRepo
readonly CODEFRESH_REPOSITORY=http://charts.codefresh.io/${CHANNEL}
helm repo add codefresh-onprem-${CHANNEL} "${CODEFRESH_REPOSITORY}"

DOCKER_CFG_JSON=$(cat ${SERVICE_ACCOUNT})

if [ $os == "linux" ]; then
  BASE64="base64 -w0"
else
  BASE64="base64"
fi

DOCKER_CFG_VAR=$(echo -n "_json_key:${DOCKER_CFG_JSON}" | $BASE64)

cat <<EOF >${DOCKER_CFG_YAML}
---
dockerconfigjson:
  auths:
    gcr.io:
      auth: ${DOCKER_CFG_VAR}

cfui:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

runtime-environment-manager:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

onboarding-status:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

cfanalytic:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}
EOF

#MTU_VALUE="--set global.mtu=$(cat /sys/class/net/cni0/mtu)"
#TIMESTAMP=$(date +%F_%H-%M-%S)
# --values "${SECRET_VALUES_FILE}" \
#  --version 0.6.62 \
#  --force \

cf_status=$(helm status $RELEASE 2>/dev/null | awk -F': ' '$1 == "STATUS" {print $2}')

if [[ -z "${cf_status}" ]]; then
  SEEDJOBS="--set global.seedJobs=true"
  CERTJOBS="--set global.certsJobs=true"
fi

if [[ -z "${cf_status}" && -z "${SKIP_VALIDATOR}" && -z "${DRY_RUN}" ]]; then
  IN_INSTALLER="true" ${DIR}/run-validator.sh
  if [[ $? != 0 ]]; then
    echo "Validation failed"
    exit 1
  fi
else 
  echo "Skipping validator because of cf_status=$cf_status or SKIP_VALIDATOR=$SKIP_VALIDATOR or DRY_RUN=$DRY_RUN"
fi

HELM=${HELM:-helm}

msg "Installing/Updating Codefresh..."
HELM_COMMAND="${HELM} upgrade ${RELEASE} codefresh-onprem-${CHANNEL}/codefresh \
  --install \
  --namespace codefresh \
  --values "${VALUES_FILE}" \
  --values "${DOCKER_CFG_YAML}" \
  --no-hooks \
  --set cfapi.redeploy=true \
  ${SET_WEBTLS_VALUES} \
  ${SEEDJOBS} \
  ${CERTJOBS} \
  ${SET_VALUES} \
  ${SET_VERSION} \
  ${SET_DEBUG}"

echo "Executing:
  $HELM_COMMAND"

if [[ -n ${DRY_RUN} ]]; then
   echo "Dry run mode, do not execute"
   exit 0
fi
$HELM_COMMAND



