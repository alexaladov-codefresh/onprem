global:
#### Depending on git provider use matching values
### for Gitlab git provider
#  gitlabClientID: 
#  gitlabClientSecret:
### for Bitbucket git provider
#  bitbucketClientID: 
#  bitbucketClientSecret:
### for Github git provider
#  githubClientID: 
#  githubClientSecret: 
#  githubInternalToken:
  appProtocol: https
### Codefresh App domain name
  appUrl: your-domain.com

### Firebase secret
firebaseSecret: 

### Uncomment if kubernetes cluster is RBAC enabled
rbacEnable: true

ingress:
### Codefresh App domain name    
  domain: your-domain.com
### Uncomment if kubernetes cluster is RBAC enabled
  rbacEnable: true
### The name of kebernetes secret with customer certificate and private key
  webTlsSecretName: "star.codefresh.io"  

### For github provider (the apiHost and loginHost are different)
cfapi:
  github:
    apiHost: api.github.com
    loginHost: github.com
    protocol: https

### For gitlab provider (the apiHost and loginHost are the same)
#cfapi:
#  gitlab:
#    apiHost: gitlab-internal.codefresh.io
#    loginHost: gitlab-internal.codefresh.io
#    protocol: https

### Define kubernetes secret name for customer certificate and private key
webTLS:
  secretName: star.codefresh.io


consul:
### If needed to use storage class that different from default
  StorageClass: {}
### Use existing volume claim name
  pvcName: cf-consul
### Use NodeSelector to assing pod to a node
  nodeSelector: {}
#    services: consul-postgresql

postgresql:
  persistence:
    existingClaim: cf-postgresql
    storageClass: {}
  nodeSelector: {}
#    services: consul-postgresql

mongodb:
## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
##  IMPORTANT !
##  It is not possible the combination when pvcName is defined and persistence:enabled = true
##  Only one of two:
##  pvcName is defined AND persistence:enabled = false
##  OR
##  pvcName is not defined (commented out) AND persistence:enabled = true
##  
## Use existing volume claim name
  pvcName: cf-mongodb
## Provision new volume claim
  persistence:
    enabled: false
    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    storageClass: {}
    accessMode: ReadWriteOnce
    size: 8Gi

  nodeSelector: {}
#    provisioner: local-volume

redis:
  persistence:
## Use existing volume claim name    
    existingClaim: cf-redis
    storageClass: {}
  nodeSelector: {}
#    provisioner: local-volume

rabbitmq:
  persistence:
## Use existing volume claim name
    existingClaim: cf-rabbitmq  
    storageClass: {}
  nodeSelector: {}
#    services: rabbitmq-registry

registry:
  storageClass: {}
  ## Use existing volume claim name
  pvcName: cf-registry
  nodeSelector: {}
#    services: rabbitmq-registry

hermes:
  nodeSelector: {}
#    services: rabbitmq-registry
  redis:
    nodeSelector: {}
#      services: rabbitmq-registry
    persistence:
## Use existing volume claim name
      existingClaim: cf-store
      storageClass: {}

cronus:
  storageClass: {}
## Use existing volume claim name
  pvcName: cf-cronus
  nodeSelector: {}
#    services: rabbitmq-registry

builder:
## Use existing volume claim name
  pvcName: cf-builder
# dockerCleanerCron: 0 0 * * *

runner:
## Use existing volume claim name  
  pvcName: cf-runner
# dockerCleanerCron: 0 0 * * *
 
global:
  env:
    HTTP_PROXY: <proxy>
    HTTPS_PROXY: <proxy>
    HTTP_NO_PROXY: <proxy>
    HTTPS_NO_PROXY: <proxy>
    